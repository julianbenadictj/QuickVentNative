// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package saml20.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;

public class PreValidateIdPFile extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __IdPFile;
	private saml20.proxies.IdPMetadata IdPFile;

	public PreValidateIdPFile(IContext context, IMendixObject IdPFile)
	{
		super(context);
		this.__IdPFile = IdPFile;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.IdPFile = this.__IdPFile == null ? null : saml20.proxies.IdPMetadata.initialize(getContext(), __IdPFile);

		// BEGIN USER CODE

        Document doc = getDocument();
        if (doc == null) return false;

        Node firstElement = getFirstElement(doc);
        if (firstElement == null) return false;

        verifyRootNodeIsEntityOrEntitiesOnly(firstElement);
        boolean isRootNodeIsEntity =false;
        if (ENTITY_DESCRIPTOR.equals(firstElement.getLocalName())) {
            appendRootNodeAsEntities(doc, firstElement);
            isRootNodeIsEntity = true;
        }

        if (replaceWhiteSpacesWhenNodeIsX509Certificate(doc) || isRootNodeIsEntity) {
            return storeFileDocumentContent(doc);
          }

        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PreValidateIdPFile";
	}

	// BEGIN EXTRA CODE

	public static final String ENTITIES_DESCRIPTOR = "EntitiesDescriptor";
	public static final String ENTITY_DESCRIPTOR = "EntityDescriptor";
	private boolean storeFileDocumentContent(Document doc) throws TransformerException, IOException {
		File tmpFile;
		do{
			tmpFile = new File(Core.getConfiguration().getTempPath().getAbsolutePath() + "/TmpIdpFile_" + System.currentTimeMillis() + ".xml");
		}while (tmpFile.exists());

		Transformer transformer = TransformerFactory.newInstance().newTransformer();
		// added getPath(), see https://stackoverflow.com/questions/15324008
		StreamResult output = new StreamResult(tmpFile.getPath());
		DOMSource input = new DOMSource(doc);

		transformer.transform(input, output);

		try (FileInputStream fis = new FileInputStream(tmpFile)) {
			Core.storeFileDocumentContent(getContext(), this.IdPFile.getMendixObject(), fis);
			tmpFile.delete();
		} catch (FileNotFoundException e) {
			Core.getLogger(this.toString()).info("File not found exception occurred while creating temp idp xml file: " + e.getMessage());
			return false;
		}
		return true;
	}

	private void appendRootNodeAsEntities(Document doc, Node firstElement) {
		Element entitiesElement = doc.createElementNS(firstElement.getNamespaceURI(), "EntitiesDescriptor");
		NamedNodeMap attrs = firstElement.getAttributes();
		for (int i = 0; i < attrs.getLength(); i++) {
			Attr attr = (Attr) attrs.item(i);
			attr = (Attr) attr.cloneNode(true);

			entitiesElement.setAttributeNode(attr);
		}
		doc.removeChild(firstElement);
		doc.appendChild(entitiesElement);


		entitiesElement.appendChild(firstElement);
	}

	private void verifyRootNodeIsEntityOrEntitiesOnly(Node firstElement) throws CoreException {
		if(!(ENTITIES_DESCRIPTOR.equals(firstElement.getLocalName()) ||
				ENTITY_DESCRIPTOR.equals(firstElement.getLocalName()))){
			throw new CoreException("Unsupported root node, only: EntitiesDescriptor and EntityDescriptor are expected but found: " + firstElement.getLocalName());
		}
	}

	private Node getFirstElement(Document doc) {
		Node firstElement = doc.getFirstChild();

		// 2015-10-12 BJHL: Comments may be placed before the first element.
		while (firstElement != null && firstElement.getNodeType() == Node.COMMENT_NODE) {
			firstElement = firstElement.getNextSibling();
		}
		return firstElement;
	}

	private Document getDocument() {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);
		DocumentBuilder builder = null;
		try {
			builder = factory.newDocumentBuilder();
		} catch (ParserConfigurationException e1) {
			Core.getLogger(this.toString()).info("Parser configuration exception while creating a new documentbuilder for the IdP metadata document: " + e1.getMessage());
			return null;
		}

		Document doc =null;
		try (InputStream idpFileStream = Core.getFileDocumentContent(getContext(), this.IdPFile.getMendixObject())) {
			doc = builder.parse(idpFileStream);
		} catch (SAXException e) {
			Core.getLogger(this.toString()).info("SAX exception while parsing the IdP metadata document: " + e.getMessage());
		} catch (IOException e) {
			Core.getLogger(this.toString()).info("IO exception occurred while parsing the IdP metadata document: " + e.getMessage());
		}
		return doc;
	}

	private boolean replaceWhiteSpacesWhenNodeIsX509Certificate(Document doc) {
		boolean isReplacedWhiteSpaces = false;
		NodeList nodeList = doc.getElementsByTagName("*");
		for (int i = 0; i < nodeList.getLength(); i++) {
			Node node = nodeList.item(i);
			if (node.getNodeType() == Node.ELEMENT_NODE && "X509Certificate".equals(node.getLocalName())) {
				node.setTextContent(node.getTextContent().replaceAll("\\s",""));
				isReplacedWhiteSpaces =true;
			}
		}
		return isReplacedWhiteSpaces;
	}

	// END EXTRA CODE
}
