// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package saml20.actions;

import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import saml20.implementation.common.MendixUtils;
import saml20.proxies.SAMLAuthnContext;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrepareAuthnContext extends CustomJavaAction<java.lang.Boolean>
{
	public PrepareAuthnContext(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
        provisionSAMLAuthnContexts();
        return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PrepareAuthnContext";
	}

	// BEGIN EXTRA CODE
    private void provisionSAMLAuthnContexts() throws CoreException {

        final IContext context = getContext();
        final List<IMendixObject> result = MendixUtils.retrieveFromDatabase(context, "//%s", null, SAMLAuthnContext.entityName);
        final List<SAMLAuthnContext> existingSAMLAuthnContexts = MendixUtils.mendixObjectListToProxyObjectList(context, result, SAMLAuthnContext.class);

        final Map<String, SAMLAuthnContext> existingSAMLAuthnContextsMap = new HashMap<>();

        existingSAMLAuthnContexts.forEach(samlAuthnContext ->
                existingSAMLAuthnContextsMap.put(samlAuthnContext.getValue().trim(), samlAuthnContext));

        ensureSAMLAuthnContext(context, "Kerberos",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos", 1000, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Integrated Windows Authentication",
                "urn:federation:authentication:windows", 900, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Public Key – X.509",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:X509", 800, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "SSL/TLS Certificate-Based Client Authentication",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:TLSClient", 700, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "PasswordProtectedTransport",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport", 600, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Password",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:Password", 500, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Internet Protocol",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "InternetProtocolPassword",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocolPassword", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "MobileOneFactorContract",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorContract", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "MobileOneFactorUnregistered",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorUnregistered", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "MobileTwoFactorContract",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorContract", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "MobileTwoFactorUnregistered",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "PreviousSession",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:PreviousSession", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Public Key - XML Digital Signature",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:XMLDSig", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Public Key – PGP",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:PGP", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Public Key – SPKI",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:SPKI", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Secure Remote Password",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Smartcard",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "SmartcardPKI",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:SmartcardPKI", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "SoftwarePKI",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:SoftwarePKI", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Telephony (\"Nomadic\")",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:NomadTelephony", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Telephony (Authenticated)",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:AuthenticatedTelephony", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Telephony (Personalized)",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:PersonalTelephony", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Telephony",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:Telephony", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "TimeSyncToken",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken", 400, existingSAMLAuthnContextsMap);

        ensureSAMLAuthnContext(context, "Unspecified",
                "urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified", 400, existingSAMLAuthnContextsMap);
    }

    private void ensureSAMLAuthnContext(IContext context, String descr, String value, int prio,
                                        Map<String, SAMLAuthnContext> existingSAMLAuthnContextsMap) throws CoreException {

        final SAMLAuthnContext existingSAMLAuthnContext = existingSAMLAuthnContextsMap.get(value.trim());
        if (existingSAMLAuthnContext == null) {
            final SAMLAuthnContext samlAuthnContext = new SAMLAuthnContext(context);
            samlAuthnContext.setDescription(descr.trim());
            samlAuthnContext.setValue(value.trim());
            samlAuthnContext.setDefaultPriority(prio);
            samlAuthnContext.setProvisioned(true);
            samlAuthnContext.commit();
        } else {
            existingSAMLAuthnContext.setDescription(descr.trim());
            existingSAMLAuthnContext.setDefaultPriority(prio);
            existingSAMLAuthnContext.setValue(value.trim());
            existingSAMLAuthnContext.setProvisioned(true);
            existingSAMLAuthnContext.commit();
        }

    }
	// END EXTRA CODE
}
